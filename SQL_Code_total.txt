--Lampros Floudas

--Q1.
SELECT dname, COUNT(ssn)
FROM department
INNER JOIN employee ON department.dnumber=employee.dno
GROUP BY dname
HAVING MAX(salary)>42000
;

--Q2.
SELECT fname
FROM department, employee
WHERE department.dnumber = employee.dno AND dno IN (SELECT distinct dno
													FROM employee
													WHERE salary IN (SELECT MIN (salary)
																	 FROM employee))
;

--Q3
SELECT distinct fname
FROM employee, department
WHERE salary - 5000  > (SELECT AVG (salary)
						FROM employee, department
						WHERE DNAME = 'Research' AND employee.dno = department.dnumber)
Î„

--Q4
CREATE VIEW dept_managers AS
SELECT fname, dname, salary
FROM employee, department
WHERE department.mgrssn = employee.ssn
;

--Q5
CREATE VIEW employees_and_projects_per_department AS 
(WITH number_of_employees AS -- reference for 'with' clause https://www.geeksforgeeks.org/sql-with-clause/
(SELECT COUNT(ssn) AS number_of_empl, dno FROM employee GROUP BY dno)
SELECT dname, fname, lname, number_of_empl, COUNT(pname) AS number_of_projects
FROM department INNER JOIN employee ON employee.ssn = mgrssn 
INNER JOIN project ON employee.dno = project.dnum
INNER JOIN number_of_employees ON number_of_employees.dno = employee.dno
GROUP BY dname, fname, lname, number_of_empl)
;

--Q6
CREATE VIEW project_employees AS
(WITH works_on_temp AS
(SELECT pno, COUNT(pno) AS employees_per_project
FROM works_on
GROUP BY pno),
hours_temp AS
(SELECT pno, SUM(hours) AS hours_per_project
FROM works_on
GROUP BY pno),
males AS
(SELECT pno, COUNT(sex) AS count_males
FROM employee NATURAL JOIN works_on
WHERE ssn = essn AND sex = 'M'
GROUP BY pno),
females AS
(SELECT pno, COUNT(sex) AS count_females
FROM employee FULL OUTER JOIN works_on -- If not full outer, then project Z which has 0 females would not be taken into the table
ON ssn = essn AND sex = 'F'
GROUP BY pno)
SELECT pname, dname, employees_per_project, count_males, count_females, hours_per_project
FROM project
INNER JOIN department ON  dnum=dnumber
INNER JOIN works_on_temp ON works_on_temp.pno=pnumber
INNER JOIN males ON works_on_temp.pno = males.pno
INNER JOIN females ON males.pno = females.pno
INNER JOIN hours_temp ON hours_temp.pno = females.pno
ORDER BY hours_per_project, pname ASC)
;

--Q7
CREATE VIEW top_hours_per_project AS
(WITH sum_of_hours_temp(essn, sum_of_hours) AS -- reference for 'with' clause https://www.geeksforgeeks.org/sql-with-clause/
(SELECT essn, SUM(hours) AS sum_of_hours  FROM works_on WHERE hours IS NOT null
GROUP BY essn
ORDER BY sum_of_hours DESC
LIMIT 3)
SELECT fname, dname, pname, hours
FROM employee 
NATURAL JOIN sum_of_hours_temp 
NATURAL JOIN department
NATURAL JOIN project 
NATURAL JOIN works_on
WHERE pnumber = pno AND dno = dnumber AND essn = ssn
ORDER BY hours ASC)
;


--Q8
SELECT name,
COUNT(CASE WHEN grade LIKE 'A%' THEN 1 END) as A,
COUNT(CASE WHEN grade LIKE 'B%' THEN 1 END) as B,
COUNT(CASE WHEN grade LIKE 'C%' THEN 1 END) as C,
COUNT(CASE WHEN grade LIKE 'D%' THEN 1 END) as D,
COUNT(CASE WHEN grade LIKE 'E%' THEN 1 END) as E,
COUNT(CASE WHEN grade LIKE 'F%' THEN 1 END) as F
FROM teaches
INNER JOIN instructor ON instructor.id=teaches.id
INNER JOIN takes ON teaches.course_id=takes.course_id 
AND teaches.sec_id=takes.sec_id 
AND teaches.semester=takes.semester
AND teaches.year=takes.year
GROUP BY name
ORDER BY A DESC, B DESC, C DESC, D DESC, E DESC, F DESC
;

--Q9
CREATE VIEW hours_students_per_room AS
(WITH tot_hours_temp AS
(SELECT building, room_number, semester, year, course_id, sec_id,round(sum((end_hr*60 +end_min - (start_hr*60 + start_min))/60),1) AS tot_hours
FROM time_slot 
NATURAL JOIN takes
NATURAL JOIN section
GROUP BY semester, room_number, building, year, sec_id, course_id),
tot_student_temp AS 
(SELECT COUNT(id) as tot_student_no, tot_hours_temp.room_number, semester, year 
FROM takes NATURAL JOIN tot_hours_temp 
GROUP BY tot_hours_temp.room_number, takes.semester, takes.year)
SELECT building, tot_hours_temp.room_number, takes.semester, takes.year, tot_hours, tot_student_no
FROM tot_hours_temp
INNER JOIN tot_student_temp ON tot_hours_temp.semester=tot_student_temp.semester 
AND tot_hours_temp.year = tot_student_temp.year 
AND tot_student_temp.room_number = tot_hours_temp.room_number
INNER JOIN takes ON takes.course_id=tot_hours_temp.course_id 
AND takes.year=tot_hours_temp.year
AND takes.semester=tot_hours_temp.semester
AND takes.sec_id=tot_hours_temp.sec_id
GROUP BY building, tot_hours_temp.room_number, takes.semester, tot_hours, takes.year, tot_hours, tot_student_no)
;

--Q10
CREATE VIEW schedule_per_department AS
(SELECT department.dept_name, title, teaches.semester, teaches.year, instructor.name, room_number, section.building, day, start_hr, start_min, end_hr, end_min
FROM department
INNER JOIN instructor ON department.dept_name = instructor.dept_name 
INNER JOIN teaches ON instructor.id = teaches.id
INNER JOIN section ON teaches.course_id = section.course_id AND section.sec_id=teaches.sec_id AND section.semester=teaches.semester AND section.year=teaches.year
INNER JOIN time_slot ON section.time_slot_id = time_slot.time_slot_id
INNER JOIN course ON course.course_id = teaches.course_id
ORDER BY department.dept_name, title, start_hr, day ASC)
;
